<template>
  <span class="w-11/12 block my-auto">
    <label class="block uppercase mb-1 text-xs font-bold">
      {{ label }}
    </label>
    <div>
      <span class="flex">
        <span class="flex">
          <div>
            <cornie-select
              class="w-full rounded-r-none"
              :items="codes"
              v-model="codeSync"
              @update:modelValue="handleChange"
            >
              <icon-input
                autocomplete="off"
                class="border border-gray-600 rounded-full focus:outline-none"
                type="search"
                placeholder="Search"
                v-bind="$attrs"
                v-model="displayVal"
              >
                <template v-slot:prepend>
                  <search-icon />
                </template>
              </icon-input>
              <template v-slot:item="{ item }">
                <span class="flex items-center">
                  {{ item.isoCode }}
                  <img class="ml-1 w-4" :src="item.flag" />
                </span>
              </template>
              <template v-slot:selected="{ item }">
                <span class="block p-2">
                  <img :src="item?.flag" class="h-4 w-7" />
                </span>
              </template>
            </cornie-select>
          </div>
        </span>
        <input
          class="rounded-r-lg border p-2 w-11/12 focus:outline-none"
          type="tel"
          v-bind="field"
        />
      </span>
    </div>
  </span>
</template>
<script>
import { countryCodes } from "@/plugins/countrycodes"
import CornieSelect from "@/componenets/CornieSelect.vue"
import CornieInput from "@/components/CornieInput.vue"
import SearchIcon from "@/components/icons/search.vue"

export default {
  name: "CorniePhoneInput",
  props: [
    "modelValue",
    "valueSyn",
    "code",
    "codeSync",
    "label",
    "name",
    "rules",
  ],
  props: {
    modelValue: {
      type: String,
      default: "",
    },
    valueSync: {
      type: String,
      default: "",
    },
    code: {
      type: String,
      default: "+234",
    },
    codeSync: {
      type: String,
      default: "",
    },
    label: {
      type: String,
      default: "",
    },
    name: {
      type: String,
      default: "",
    },
    rules: {
      type: Object,
    },
  },
  components: {
    CornieSelect,
    CornieInput,
    SearchIcon,
  },
  data: () => ({
    phoneRegex:
      /^((\\+[1-9]{1,4}[ \\-]*)|(\\([0-9]{2,3}\\)[ \\-]*)|([0-9]{2,4})[ \\-]*)*?[0-9]{3,4}?[ \\-]*[0-9]{3,4}?$/,
  }),
  computed: {
    inputName: {
      get() {
        const id = Math.random().toString(36).substring(2, 9)
        return this.name || `phone-${id}`
      },
    },
    customRules: {
      get() {
        // const phoneRule = string()
        //   .matches(this.phoneRegex, "A valid phone number is required")
        //   .min(9, "A valid phone number must contain at least 11 digits")
        //   .max(11)
        if (this.rules) return phoneRule.concat(this.rules)
        return phoneRule
      },
    },
    codes: {
      get() {
        return countryCodes
          .sort((a, b) => {
            if (a.name > b.name) return 1
            if (a.name < b.name) return -1
            return 0
          })
          .map((country) => ({
            ...country,
            display: country.dialCode,
            code: country.dialCode,
            flag: `https://flagcdn.com/60x45/${country.isoCode.toLowerCase()}.png`,
          }))
      },
    },
  },
}
</script>
<style scoped>
.style-chooser .vs__search::placeholder,
.style-chooser .vs__dropdown-toggle,
.style-chooser .vs__dropdown-menu {
  background: #dfe5fb;
  border: none;
  color: #394066;
  text-transform: lowercase;
  font-variant: small-caps;
}

.phone-grid {
  display: grid;
  columns: 10% 90%;
}
</style>
